Where has the performance gone
==============================

In this text I try to figure out the main reasons of performance loss in
ContextR in comparison to standard programming.

Base Performance
----------------

Whenever seconds or ratio concerning speed are given, they refer to my local 
machine, Ruby 1.8.6 (MRI) and the benchmark written by Christian Neukirchen. 
In 1,000,000 iterations a simple method call on an instance, which only 
returns `true`, lasts 0.4 seconds.

The core method
---------------

The basic method, that is wrapped, has to be replaced with one, that 
additionally calls the context-depended code. Currently, this method takes
all arguments and combines them in an array with the splat-operator(`*`), when
the core methods takes an arbitrary number of arguments. This
takes 0.45 additional seconds.

The method is i.e. replaced with the following code:

    ContextR::current_layer.extended( self ).send( :method_name )

The calls in the above code causes an additional slow down of 1.2 seconds, 
since it simply triples the method lookups, without taking the additional computational work done in these methods.

dynamic.rb
----------

This library by Christian Neukirchen provides dynamic variable scope, which 
allows ContextR to store the currently activated layers. The look up of this 
value consumes additional 1.5 seconds. Since it consists only of simple hash 
lookups, there is not much space left to improve its speed.


ContextR stack as a whole
-------------------------

The whole stack, from finding the current layer and the correct method to 
execute leads to 5.4 seconds or a 13 times slower performance.

Additionally there is frankly speaking more code to execute, that reflects 
the changed behaviour. This results in additional method calls and checks that 
end up with

- no perfomance loss, when no additional behaviour is activated
- 9 additional seconds for one pre wrapper and
- 11 additional seconds for two pre wrappers, so the second one is far cheaper 
  than the first
- 21 additional seconds for one around wrapper
- 30 additional seconds for one pre, one around, and one post wrapper


The overall numbers
-------------------

                              user     system      total        real
    Ordinary:             0.410000   0.000000   0.410000 (  0.404385)
    Once (w/o):           5.990000   0.000000   5.990000 (  6.011220)
    Once (ctx):          15.330000   0.040000  15.370000 ( 15.654238)
    Twice (w/o):          6.010000   0.020000   6.030000 (  6.181048)
    Twice (ctx):         17.540000   0.050000  17.590000 ( 17.916814)
    Wrapped (w/o):        5.980000   0.000000   5.980000 (  6.003156)
    Wrapped (ctx):       27.200000   0.080000  27.280000 ( 27.709265)
    All wrappers (ctx):  36.210000   0.040000  36.250000 ( 36.396985)


